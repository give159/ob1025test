# 社員管理システム IPO設計書

**作成日**: 2025年10月25日  
**バージョン**: 1.0  
**ステータス**: 実装前設計

---

## 1. システム概要

### 1.1 目的
社員情報（名前、給料、所属部署）を管理し、解雇処理を含む基本的な人事管理機能を提供する。

### 1.2 対象ユーザー
- 人事担当者
- 経営陣（社長）

---

## 2. 機能一覧とIPO定義

### 2.1 社員登録機能

#### IPO-001: 一般社員登録

**【Input（入力）】**
- 社員名（文字列、必須、50文字以内）
- 給料（整数、必須、0円以上10,000,000円以下）
- 所属部署（文字列、必須）

**【Process（処理）】**
1. 入力データの妥当性チェック
   - 名前が空でないこと
   - 給料が範囲内であること
   - 部署名が空でないこと
2. 社員オブジェクトの生成
3. 社員リストへの追加
4. 社員数のカウント更新

**【Output（出力）】**
- 登録成功メッセージ
- 登録後の社員数
- エラー時：エラーメッセージとエラーコード

**【例】**
```
Input:  名前="佐藤太郎", 給料=250000, 部署="営業部"
Process: バリデーション → オブジェクト生成 → リスト追加
Output: "佐藤太郎さんを登録しました（社員数: 3人）"
```

---

#### IPO-002: 社長登録

**【Input（入力）】**
- 社長名（文字列、必須）
- 給料（整数、必須）
- 会社オブジェクトへの参照

**【Process（処理）】**
1. 入力データの妥当性チェック
2. 社長オブジェクトの生成
3. 会社オブジェクトとの紐付け
4. 表示名に「社長」の肩書き付与

**【Output（出力）】**
- 社長名（肩書き付き）
- 給料
- 登録成功メッセージ

**【例】**
```
Input:  名前="山田太郎", 給料=3000000
Process: バリデーション → 肩書き付与 → 会社紐付け
Output: "山田太郎社長を登録しました"
```

---

### 2.2 社員情報取得機能

#### IPO-003: 全社員情報取得

**【Input（入力）】**
- なし（会社オブジェクトから取得）

**【Process（処理）】**
1. 社員リストを走査
2. 各社員の情報を整形
3. 給料を通貨フォーマットに変換
4. 社長情報を追加

**【Output（出力）】**
- 社員リスト
  - 各社員: 名前、給料（フォーマット済み）、部署
- 社長情報: 名前（肩書き付き）、給料
- 合計社員数
- 総給与額

**【例】**
```
Input:  なし
Process: リスト走査 → データ整形 → 集計
Output: 
  社員1: 佐藤太郎, 250,000円, 営業部
  社員2: 鈴木花子, 300,000円, 開発部
  社長: 山田太郎社長, 3,000,000円
  合計: 3人, 総給与: 3,550,000円
```

---

#### IPO-004: 個別社員情報取得

**【Input（入力）】**
- 社員名（文字列）

**【Process（処理）】**
1. 社員名で検索
2. 該当社員の存在確認
3. 社員情報の取得と整形

**【Output（出力）】**
- 成功時: 社員の詳細情報
- 失敗時: 「社員が見つかりません」エラー

**【例】**
```
Input:  名前="佐藤太郎"
Process: 名前検索 → データ取得
Output: 名前=佐藤太郎, 給料=250,000円, 部署=営業部
```

---

### 2.3 社員解雇機能

#### IPO-005: 社長による解雇

**【Input（入力）】**
- 解雇対象の社員名（文字列）
- 実行者: 社長

**【Process（処理）】**
1. 解雇権限の確認（社長のみ可能）
2. 対象社員の存在確認
3. 社員リストから削除
4. 社員数の更新
5. 解雇ログの記録

**【Output（出力）】**
- 解雇通知メッセージ
- 更新後の社員数
- エラー時: 権限エラーまたは対象者不在エラー

**【例】**
```
Input:  社員名="佐藤太郎", 実行者=社長
Process: 権限確認 → 存在確認 → リスト削除 → ログ記録
Output: "佐藤太郎さんを解雇しました（残り社員数: 2人）"
```

---

#### IPO-006: 解雇手続き（デコレータ機能付き）

**【Input（入力）】**
- 解雇対象の社員名（文字列）

**【Process（処理）】**
1. 対象社員の存在確認
2. 社員リストから削除
3. 社員数カウント（デコレータ処理）
4. 解雇手続き完了処理

**【Output（出力）】**
- 解雇手続き完了メッセージ
- 現在の社員数（自動表示）

**【例】**
```
Input:  社員名="鈴木花子"
Process: 存在確認 → 削除 → カウント更新
Output: 
  "鈴木花子さんの解雇手続きが完了しました"
  "現在わが社の社員数は2人になっています"
```

---

### 2.4 統計・集計機能

#### IPO-007: 給与統計取得

**【Input（入力）】**
- なし

**【Process（処理）】**
1. 全社員の給料を取得
2. 統計値を計算
   - 合計
   - 平均
   - 最大
   - 最小
3. 通貨フォーマットに変換

**【Output（出力）】**
- 総給与額
- 平均給与
- 最高給与
- 最低給与

**【例】**
```
Input:  なし
Process: 給料リスト取得 → 統計計算
Output:
  総給与: 3,550,000円
  平均: 1,183,333円
  最高: 3,000,000円
  最低: 250,000円
```

---

#### IPO-008: 部署別集計

**【Input（入力）】**
- なし

**【Process（処理）】**
1. 社員を部署ごとにグループ化
2. 部署別の人数をカウント
3. 部署別の給与合計を計算

**【Output（出力）】**
- 部署リスト
  - 各部署: 部署名、人数、給与合計

**【例】**
```
Input:  なし
Process: 部署でグループ化 → 集計
Output:
  営業部: 1人, 給与合計 250,000円
  開発部: 1人, 給与合計 300,000円
```

---

## 3. データフロー図

### 3.1 社員登録フロー

```
[ユーザー入力]
    ↓
[Input] 名前、給料、部署
    ↓
[Process] バリデーション
    ↓
    ├─ OK → [Process] 社員オブジェクト生成
    │           ↓
    │       [Process] リスト追加
    │           ↓
    │       [Output] 成功メッセージ
    │
    └─ NG → [Output] エラーメッセージ
```

### 3.2 解雇処理フロー

```
[社長による解雇指示]
    ↓
[Input] 社員名
    ↓
[Process] 権限確認
    ↓
    ├─ OK → [Process] 社員検索
    │           ↓
    │           ├─ 存在 → [Process] リスト削除
    │           │             ↓
    │           │         [Output] 解雇通知
    │           │
    │           └─ 不在 → [Output] 社員不在エラー
    │
    └─ NG → [Output] 権限エラー
```

---

## 4. エラー処理定義

### 4.1 入力エラー

| エラーコード | エラー内容 | Input | Process | Output |
|------------|----------|-------|---------|--------|
| E001 | 名前が空 | 空文字 | 検証失敗 | "名前を入力してください" |
| E002 | 給料が範囲外 | -1000 | 範囲チェック失敗 | "給料は0円以上で入力してください" |
| E003 | 部署が空 | 空文字 | 検証失敗 | "部署を入力してください" |

### 4.2 処理エラー

| エラーコード | エラー内容 | Input | Process | Output |
|------------|----------|-------|---------|--------|
| E101 | 社員が存在しない | "存在しない名前" | 検索失敗 | "指定された社員が見つかりません" |
| E102 | 権限不足 | 一般社員 | 権限確認失敗 | "この操作を実行する権限がありません" |
| E103 | 重複登録 | 既存の名前 | 重複チェック失敗 | "同じ名前の社員が既に存在します" |

---

## 5. テストケース（IPO形式）

### 5.1 正常系テスト

#### TC-001: 社員登録（正常）

```
Input:
  名前: "田中一郎"
  給料: 280000
  部署: "開発部"

Process:
  1. 入力検証 → OK
  2. オブジェクト生成 → 成功
  3. リスト追加 → 成功

Expected Output:
  メッセージ: "田中一郎さんを登録しました"
  社員数: 増加
  戻り値: True
```

#### TC-002: 社員情報取得（正常）

```
Input:
  なし（全社員取得）

Process:
  1. 社員リスト走査
  2. データ整形

Expected Output:
  社員リスト: [
    {名前: "佐藤太郎", 給料: "250,000円", 部署: "営業部"},
    {名前: "田中一郎", 給料: "280,000円", 部署: "開発部"}
  ]
  社員数: 2
```

#### TC-003: 解雇処理（正常）

```
Input:
  社員名: "佐藤太郎"
  実行者: 社長

Process:
  1. 権限確認 → OK（社長）
  2. 社員検索 → 存在
  3. リスト削除 → 成功

Expected Output:
  メッセージ: "佐藤太郎さんを解雇しました"
  社員数: 1（削除後）
  戻り値: True
```

### 5.2 異常系テスト

#### TC-101: 社員登録（名前が空）

```
Input:
  名前: ""
  給料: 250000
  部署: "営業部"

Process:
  1. 入力検証 → NG（名前が空）

Expected Output:
  エラーコード: E001
  メッセージ: "名前を入力してください"
  戻り値: False
```

#### TC-102: 解雇処理（社員不在）

```
Input:
  社員名: "存在しない太郎"
  実行者: 社長

Process:
  1. 権限確認 → OK
  2. 社員検索 → 不在

Expected Output:
  エラーコード: E101
  メッセージ: "指定された社員が見つかりません"
  戻り値: False
```

---

## 6. 実装時の注意事項

### 6.1 Inputフェーズ
- 全ての入力は型チェックを行う
- 文字列は前後の空白をトリム
- 数値は範囲チェックを必須とする

### 6.2 Processフェーズ
- 処理は単一責任とする
- 複雑な処理は小さな関数に分割
- ログを適切に出力する

### 6.3 Outputフェーズ
- ユーザー向けメッセージは日本語で明確に
- データは必要に応じてフォーマット
- エラー時は原因を明示

---

## 7. パフォーマンス要件

| 機能 | Input量 | 処理時間目標 | Output量 |
|-----|---------|------------|---------|
| 社員登録 | 1件 | < 0.01秒 | 1メッセージ |
| 全社員取得 | 100件 | < 0.1秒 | 100件 |
| 社員検索 | 100件中1件 | < 0.05秒 | 1件 |
| 解雇処理 | 1件 | < 0.02秒 | 1メッセージ |

---

## 8. 今後の拡張予定

### Phase 2（将来実装）
- **IPO-009**: CSV一括登録
  - Input: CSVファイル
  - Process: 一括バリデーション → 一括登録
  - Output: 登録件数レポート

- **IPO-010**: データベース永続化
  - Input: 保存コマンド
  - Process: SQL変換 → DB書き込み
  - Output: 保存成功/失敗

- **IPO-011**: 給与計算
  - Input: 勤務時間データ
  - Process: 給与計算ロジック
  - Output: 給与明細

---

## 9. 承認欄

| 役割 | 氏名 | 承認日 | サイン |
|-----|------|--------|--------|
| 作成者 | - | 2025/10/25 | - |
| レビュアー | - | - | - |
| 承認者 | - | - | - |

---

**【改訂履歴】**
- v1.0 (2025/10/25): 初版作成
